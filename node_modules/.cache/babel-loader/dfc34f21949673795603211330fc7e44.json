{"ast":null,"code":"var _jsxFileName = \"/Users/keaganeng/IBMAccelerate/week1/to-do-list_week1-keaganeng/src/component/todos.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"../component/todos.css\";\nimport { Card, CardContent, Grid, ListItemButton, ListItemText, Checkbox } from \"@mui/material\"; // 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todos = _ref => {\n  _s();\n\n  let {\n    todos\n  } = _ref;\n  const [checked, setChecked] = React.useState(false);\n\n  const handleChange = event => {\n    setChecked(event.target.checked);\n  };\n\n  const todoList = todos.length ? todos.map(todo => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: checked,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              padding: \"50px\"\n            },\n            children: todo.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"You have no to-do's left.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this); // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoCollection\",\n    style: {\n      padding: \"10px\"\n    },\n    children: todoList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Todos, \"OiiR1BYWvMsLHMiD2uYkeM3TCO0=\");\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"names":["React","useState","Card","CardContent","Grid","ListItemButton","ListItemText","Checkbox","Todos","todos","checked","setChecked","handleChange","event","target","todoList","length","map","todo","padding","content","id"],"sources":["/Users/keaganeng/IBMAccelerate/week1/to-do-list_week1-keaganeng/src/component/todos.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"../component/todos.css\";\nimport { Card, CardContent, Grid, ListItemButton, ListItemText, Checkbox } from \"@mui/material\";\n\n// 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\nconst Todos = ({ todos }) => {\n  const [checked, setChecked] = React.useState(false);\n  const handleChange = (event) => {\n    setChecked(event.target.checked);\n  };\n\n  const todoList = todos.length ? (\n    todos.map((todo) => {\n      return (\n        <Grid key={todo.id}>\n          <Card>\n            {/* Remember, we set the local state of this todo item when the user submits the form in \n            AddTodo.js. All we need to do is return the todo list item */}\n            <Checkbox checked={checked} onChange={handleChange}/>\n            <CardContent>\n              <span style={{ padding: \"50px\" }}>{todo.content}</span>\n            </CardContent>\n          </Card>\n        </Grid>\n      );\n    })\n  ) : (\n    <p>You have no to-do's left.</p>\n  );\n  // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n  return (\n    <div className=\"todoCollection\" style={{ padding: \"10px\" }}>\n      {todoList}\n    </div>\n  );\n};\n  \nexport default Todos;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,wBAAP;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,IAA5B,EAAkCC,cAAlC,EAAkDC,YAAlD,EAAgEC,QAAhE,QAAgF,eAAhF,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,KAAK,GAAG,QAAe;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAC3B,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,KAAK,CAACC,QAAN,CAAe,KAAf,CAA9B;;EACA,MAAMW,YAAY,GAAIC,KAAD,IAAW;IAC9BF,UAAU,CAACE,KAAK,CAACC,MAAN,CAAaJ,OAAd,CAAV;EACD,CAFD;;EAIA,MAAMK,QAAQ,GAAGN,KAAK,CAACO,MAAN,GACfP,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAU;IAClB,oBACE,QAAC,IAAD;MAAA,uBACE,QAAC,IAAD;QAAA,wBAGE,QAAC,QAAD;UAAU,OAAO,EAAER,OAAnB;UAA4B,QAAQ,EAAEE;QAAtC;UAAA;UAAA;UAAA;QAAA,QAHF,eAIE,QAAC,WAAD;UAAA,uBACE;YAAM,KAAK,EAAE;cAAEO,OAAO,EAAE;YAAX,CAAb;YAAA,UAAmCD,IAAI,CAACE;UAAxC;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAJF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF,GAAWF,IAAI,CAACG,EAAhB;MAAA;MAAA;MAAA;IAAA,QADF;EAYD,CAbD,CADe,gBAgBf;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAhBF,CAN2B,CAwB3B;;EACA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAgC,KAAK,EAAE;MAAEF,OAAO,EAAE;IAAX,CAAvC;IAAA,UACGJ;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA9BD;;GAAMP,K;;KAAAA,K;AAgCN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}